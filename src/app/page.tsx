import Link from 'next/link';

export default function Home() {
  return (
    <main className="prose dark:prose-invert lg:prose-xl">
      <section className="border-b">
        <h1>
          안녕하세요,
          <br />
          프론트엔드 개발자 이다용입니다.
        </h1>
        <ul>
          <li>“인류에게 도움이 되는 것을 만들자”가 좌우명이며 “중용과 메타인지”을 중요하다고 믿고 있습니다.</li>
          <li>“성공하려면 도전과 실패가 필요”하다고 믿어 실패 비용이 적은 개발자의 길을 선택했습니다.</li>
          <li>
            특히 “사용자 경험을 어떻게 하면 향상” 시킬 수 있을지 고민하는 과정이 좋아 “프론트엔드 개발을 중심”으로
            공부했습니다.
          </li>
          <li>“기본에 충실”하기 위해 성균관대학교 소프트웨어학과로 편입하여 공학적 지식을 쌓고 있습니다.</li>
          <li>
            앞으로 “프론트엔드 개발 환경을 심도 있게 학습하고 개선”하여 인류에게 도움이 되는 것이 가능한 한 빠르고 많이
            나올 수 있도록 나아갈 것입니다.
          </li>
        </ul>
      </section>
      <section className="border-b">
        <h2>프로젝트</h2>
        <h3>
          성균관대학교 코딩플랫폼 (<Link href="https://codedang.com">코드당</Link>)
        </h3>
        <p>
          성균관대학교 재학생들이 별도의 개발 환경 설치 없이 수업 시간에 프로그래밍 문제를 풀고, 알고리즘 경진 대회를
          개최할 수 있는 등 학우들의 프로그래밍 역량을 향상하기 위한 교내 코딩 플랫폼 서비스를 개발했습니다.
        </p>
        <p>
          2024년 1학기에 주요 기능 개발을 완료하여 강의 시간에 약 70명의 재학생을 대상으로 회원가입과 문제 풀이 등 베타
          테스트를 성공적으로 완료했습니다. 이처럼 사용자가 있는 프로젝트이며, 약 4명씩 팀원이 있는 프론트엔드, 백엔드,
          인프라, 기획 및 디자인팀이 협업하여 운영 및 개발하고 있습니다.
        </p>
        <h3>기술 선택 기준 명료화 및 문서화</h3>
        <p>
          해당 프로젝트 참여 당시, 프론트엔드 팀에는 명확한 기술 선택 기준이 없었습니다. 주기적으로 개발자가 변경되는
          상황에서 별다른 이유 없이 배우고자 하는 사람이 적은 Vue로 개발하는 것은 문제가 있다고 생각했습니다. 실제로
          신입 부원을 모집하는 데 어려움을 겪고 있었습니다. 이에 학습이 쉽고 시장 점유율이 높은 기술을 선택하는 것이
          동아리 상황에 맞다고 생각했고, 상황에 맞는 기술을 사용하도록 추진했습니다. 이를 위해 기술 선택 기준 그리고
          변경할 기술의 특징과 선택 이유를 문서화하여 공유함으로써 충분한 공감대를 형성하였습니다. 이러한 과정을 통해
          팀의 일관성과 효율성을 높일 수 있었습니다.
        </p>
        <h3>Vue에서 Next.js로 전환</h3>
        <p>
          기존 부원의 이탈로 인해 신입 부원을 적극적으로 모집해야 했고, 위 선택 기준에 따라 React 기반의 Next.js로
          전환하기로 했습니다. 전환 당시 프론트엔드 팀장 역할을 맡고 있었으며, 프로젝트 초기 설정부터 전반적으로
          관여했습니다. 프로젝트 초기 설정 시, Lefthook, Prettier, Eslint와 같은 자동화 도구의 환경설정을 일부
          수정했습니다. 또한, 필요한 컴포넌트만 다운로드하여 Tailwind CSS로 수정할 수 있는 Shadcn UI 그리고 간단한
          구조를 가져 학습하기 쉬운 Zustand를 선택하는 등 상황에 맞게 기술을 선택했습니다.
        </p>
        <h3>분할정복 방식으로 문제 해결 그리고 적극적인 협업</h3>
        <p>
          Next.js 초기 설정을 완료한 이후, 사용자 인증과 같이 팀원들이 부담스러워하는 기능을 도맡아 구현했습니다. 사용자
          인증은 백엔드 서버에서 발급된 JWT 인증 토큰을 사용자와 SSR 서버 간에 주고받으며 관리하는 것으로, 프로젝트에서
          중요한 역할을 했습니다.
        </p>
        <p>
          먼저, 사용자 인증 흐름을 이해하기 위해 공식 문서를 참고하여 SSR 서버의 요청, 응답, 렌더링 흐름을 파악했습니다.
          그런 다음, 백엔드 코드를 통해 JWT 발급 및 인증 처리에 대한 자체적인 로직을 파악했습니다.
        </p>
        <p>
          구현 과정에서 사용자 인증이라는 큰 기능을 작은 기능으로 나누어 단계별로 작업을 진행했습니다. 예를 들어, 페이지
          요청 시 쿠키에서 인증 토큰을 확인하고, 토큰의 유효성을 검사하며, 필요한 경우 새 토큰을 발급받는 과정 등으로
          나누었습니다. 이에 따라 개발 과정이 체계적이고 효율적으로 이루어졌으며, 문제 발생 시 빠르게 대응할 수
          있었습니다. 이를 통해 공식 문서를 꼼꼼히 읽는 습관과 분할정복 방식으로 문제를 해결하는 역량을 키웠습니다.
        </p>
        <p>
          또한, 한 아이디로 여러 기기에서 동시에 로그인하면 인증 토큰 재발급이 불안정한 문제를 발견했습니다. 이를
          해결하기 위해 백엔드 서버 로그를 문제의 원인을 파악하고, 리프레시 토큰 관리 방식을 개선하는 해결책을
          제안했습니다. 이처럼 다른 팀의 일이라도 문제를 먼저 분석하고 가능하다면 개선점까지 전달하며 협업하려고
          노력했습니다.
        </p>
        <h3>성능 및 생산성 개선 경험</h3>
        <p>
          먼저, Code Editor 페이지에서 First Load JS 파일 용량이 1.1MB를 초과하는 것을 발견했습니다. 이에 Webpack
          Analyzer를 사용하여 빌드된 청크를 분석한 결과, 불필요한 프로그래밍 언어 패키지들이 모두 불러와지고 있음을
          확인했습니다. 이를 해결하여 First Load JS 파일 용량을 0.67MB로 줄였습니다. 이로써 사용자 경험을
          개선하였습니다.
        </p>
        <p>
          또한, 사용자 입력 등으로 자주 상태가 변경되는 컴포넌트를 중심으로 React Developer Tools를 사용하여 불필요한 리
          렌더링이 발생하는지 확인했습니다. 불필요한 리 렌더링이 발생하는 컴포넌트를 분리하여 불필요한 리 렌더링을
          방지했습니다.
        </p>
        <p>
          자주 사용되는 상수는 한 파일에 모으고, Omit과 같은 유틸리티 타입을 사용해 타입 중복 선언을 방지함으로써 코드의
          중복을 최소화했습니다. 이를 통해 코드 유지보수를 용이하게 하고, 협업 시 코드의 가독성을 높이는 데
          기여했습니다.
        </p>
        <p>
          Next.js, Zustand, Shadcn UI 등의 소셜 채널을 팔로우하고, 주기적으로 공식 문서를 읽으며 더 나은 구현 방법을
          고민하고 공유했습니다. 예를 들어, 최근에는 Zustand의 Persist 기능을 알게 되어 해당 기능을 사용하는 방식으로
          코드를 간소화하고, 관련 내용을 팀원들과 공유했습니다.
        </p>
        <p>
          이러한 경험을 통해 소프트웨어 품질 및 성능을 향상하고, 생산성을 개선하는 데 많은 재미와 보람을 느꼈습니다.
        </p>
      </section>
      <section className="border-b">
        <h2>활동</h2>
        <h3>개발 동아리 / 스꾸딩</h3>
        <ul>
          <li>
            교내 개발 동아리 중 기술적으로 가장 활발한 성균관대학교 코딩플랫폼 개발 동아리로 프론트엔드 (전) 멘토와 (현)
            팀장 역할을 수행했습니다.
          </li>
          <li>
            지속적인 배포 일정 지연으로 기존 부원들 사이에서 동기 부여 문제가 생겨 이탈하는 상황에서도 끝을 보자는
            집념으로 열심히 참여하여, 현재는 베타 테스트를 성공적으로 마치고 동아리 인원도 약 10명에서 30명 이상으로
            성장하는 과정을 함께 했습니다.
          </li>
          <li> 동아리 부원들과 함께 인프콘과 Go To Songdo 등의 컨퍼런스에 참여하며 개발 생태계를 탐색했습니다.</li>
          <li>
            주기적으로 사용하는 기술들의 업데이트 내용과 새로운 기술들을 팀원들에게 공유하여 기술적인 활력을
            불어넣었습니다.
          </li>
          <li>
            신입 부원들을 위한 스터디 자료와 실습 프로젝트를 설계했으며, 이를 통해 기술적 배경지식이 적은 팀원과의 소통
            능력을 향상했습니다.
          </li>
          <li>
            신뢰를 바탕으로 팀 문화를 팀장 주도 태스크 할당에서 자기 주도 태스크 할당으로 전환하여, 팀원들이 자율적이고
            책임감 있게 일할 수 있는 환경을 조성하여 팀 생산성을 높였습니다.
          </li>
          <li>
            할당된 태스크는 담당자가 주도적으로 해결 방법을 찾고 구현하며, 문제 발생 시 해당 부분을 가장 잘 아는 사람인
            해당 담당자가 책임지고 해결하도록 하는 문화를 만들어 팀의 생산성을 높였습니다.
          </li>
        </ul>
      </section>
      <section className="border-b">
        <h2>수상</h2>
        <h3>SW 중심대학 공동 해커톤 (우수상)</h3>
        <ul>
          <li>약 50개의 대학에서 개발자 4명과 디자이너 1명씩 참여한 해커톤에서 우수상을 받았습니다.</li>
          <li>이 행사에서는 각기 다른 대학의 참가자들이 한 팀을 이뤄야 하는 독특한 팀 빌딩 조건이 있었습니다.</li>
          <li>
            처음 만난 사람들과 소통을 통해 신뢰를 쌓고 같은 목표를 향해 나아가며, 취업을 포기한 청년과 구인에 어려움을
            겪는 기업을 연결하는 과정을 간소화하는 웹사이트를 개발했습니다.
          </li>
        </ul>
        <h3>Elice AI Edu 해커톤 (우수상)</h3>
        <ul>
          <li>
            2,000명 이상이 참여한 코딩 테스트를 통과하여 본선에 진출했고 완성도가 높다는 이유로 우수상을 받았습니다.
          </li>
          <li>
            팀에서 유일한 프론트엔드 개발자였고, 2일이라는 짧은 일정이었지만 프로젝트 매니저와 협력하여 기능별
            우선순위를 정했습니다. 이에 주요 기능 위주로 개발을 완료하여 프로젝트의 완성도를 높일 수 있었습니다.
          </li>
          <li>GPT API를 활용하여 개인 브랜딩에 대한 조언을 제공하는 서비스를 개발했습니다.</li>
        </ul>
      </section>
      <section className="border-b">
        <h2>교육</h2>
        <h3>경민대학교 융합소프트웨어과 (4.5/4.5)</h3>
        <h4>창업 후 배움에 대한 열망</h4>
        <p>
          고등학교 때 창업을 경험한 후, 기술적인 부족함을 깨닫고 더 깊이 있는 개발 공부를 위해 대학교에 진학했습니다.
        </p>
        <p>
          학우들과 지식을 공유하며 함께 성장하고자 구름 사의 데벨업 클럽에 지원하여 학우들이 유료 강의를 무료로 수강할
          수 있게 했습니다. 하지만 이에 관심을 보이는 학우가 없었고 과제 및 시험 난이도가 하향 평준화된 점 등 여러
          아쉬운 부분들이 있어 편입하게 되었습니다.
        </p>
        <h3>성균관대학교 소프트웨어학과 (4.15/4.5)</h3>
        <h4>단기에 편입 합격</h4>
        <p>
          고등학교 시절 창업 등 진로 활동으로 기초에 부족함이 있어 편입을 선택하는 것은 쉽지 않았습니다. 그러나 도전하지
          않으면 아무것도 변하지 않는다고 생각해 도전했습니다. 능동적으로 공부하는 것을 좋아해 학원 대신 집에서 혼자
          인터넷 강의와 유튜브 등을 통해 공부했습니다. 주도적으로 공부한 결과 보통 1년을 준비하는 편입 시험을 6개월 만에
          합격했고, 이 과정에서 자기 주도적 학습 능력과 성장 마인드셋을 강화했습니다.
        </p>
        <h4>빠른 적응력과 컴퓨터 공학 역량 강화</h4>
        <p>
          편입 직후 개발 동아리에 가입하는 등 새로운 환경에 빠르게 적응하고 프론트엔드 개발을 다시 시작했습니다. 첫
          학기에 시스템 프로그램 개론과 컴퓨터 구조 개론을 들으며 컴퓨터 동작 과정을 더 이해할 수 있었습니다. 이후 xv6
          운영체제, Linux Congestion Control Module, SimpleDB Buffer Manager 등을 개선하는 과제를 통해 오픈소스
          소프트웨어 개선 능력을 키웠습니다. 또한 HCI 개론, 기술경영 개론, 기계학습 원론을 수강하며 다양한 분야의 지식을
          쌓고 시야를 넓혀 나갔습니다.
        </p>
        <h4>성장 마인드셋과 함께 성장 추구</h4>
        <p>
          대부분이 성장 마인드셋을 가지고 열정적으로 활동하는 환경에서 만족스러운 학교생활을 하고 있습니다. 또한 학과
          선후배 웹 개발 부분 멘토와 신입생 대상 파이썬 사전 교육 조교를 수행하며 함께 성장하고자 노력하고 있습니다.
        </p>
        <h3>삼성전자 대학생 S/W 알고리즘 역량 강화 특강</h3>
        <h4>끊임없는 성장 욕구</h4>
        <p>
          취업 준비의 목적으로 알고리즘 공부를 하는 것을 넘어 문제 분석 및 해결 능력을 향상하고자 특강에 지원했습니다.
          성장하고자 하는 욕구로 열심히 준비하여 1:5의 경쟁률을 뚫고 입과 테스트에 통과했습니다.
        </p>
        <h4>성실한 참여 그리고 단기에 합격</h4>
        <p>
          매일 진행된 강의를 통해 Rabin-Karp, Trie, Segment tree와 같은 중급 알고리즘 및 문제 접근 방법을 배웠습니다.
          또한, 연습 문제 3개와 4시간이 걸리는 실전 문제 하나를 꾸준히 풀고 그 해결 방법을 분석하고 정리했습니다. 교육
          기간 도중 그리고 그 이후 총 두 번 사내 S/W 역량 테스트 응시 기회가 주어졌고, 성실하게 교육에 참여한 결과 교육
          도중에 합격할 수 있었습니다. 이 특강을 통해 문제의 핵심을 파악하고 상황에 맞는 해결책을 제시할 수 있는 역량을
          개발했습니다.
        </p>
      </section>
      <section className="border-b">
        <h2>역량</h2>
        <h3>프론트엔드</h3>
        <ul>
          <li>
            주로 React 기반의 프레임워크인 Next.js를 사용하며, 함수의 순수성을 지키는 등 기본 원칙을 준수하여 이해하기
            쉬운 코드를 작성합니다.
          </li>
          <li>React Server Component 및 Suspense와 같은 React의 최신 기술을 활용할 수 있습니다.</li>
          <li>명시적으로 작성자의 의도를 파악할 수 있는 TypeScript와 같은 정적 타입 언어를 선호합니다.</li>
          <li>
            마크업 및 스타일링 작업 후 불필요한 요소는 제거하여 DOM tree를 간소화하고 의미에 맞는 시맨틱 요소를 사용하여
            웹 표준을 준수합니다.
          </li>
          <li>Jest, Vite, 그리고 Testing Library로 테스트 코드를 작성할 수 있습니다.</li>
          <li>URL 쿼리, 전역 상태 라이브러리, 그리고 웹 저장소 등을 상황에 맞게 적절히 사용합니다.</li>
          <li>브라우저의 작동 과정과 구성요소에 대해 기초적으로 이해하고 있습니다.</li>
          <li>Go 또는 Rust와 같은 언어로 기존 기술들을 대체하는 동향에 관심을 가지고 있습니다.</li>
        </ul>
        <h3>백엔드</h3>
        <ul>
          <li>Next.js의 Route Handlers 및 Express를 사용하여 간단한 웹 서버를 개발할 수 있습니다.</li>
          <li>SQL 또는 Prisma와 같은 ORM을 사용하여 데이터베이스를 제어 및 조작할 수 있습니다.</li>
        </ul>
        <h3>DevOps</h3>
        <ul>
          <li>GitHub Actions를 활용하여 CI를 구축할 수 있습니다.</li>
          <li>Vercel로 스테이징 서버를 배포하고 운영한 경험이 있으며 개발 경험을 중요시하여 좋아합니다.</li>
          <li>개발 비용이 적절하다고 판단이 되면 스크립팅 언어를 활용해 자동화합니다.</li>
        </ul>
        <h3>컴퓨터 공학</h3>
        <ul>
          <li>고급 언어로 작성된 코드는 사람이 읽기 쉬워야 한다고 생각합니다.</li>
          <li>Locality에 대한 이해를 바탕으로 캐시를 상황에 맞게 적절히 사용합니다.</li>
          <li>
            시간 복잡도뿐만 아니라 메모리 접근 등 비용이 많이 드는 연산자에 대한 이해를 바탕으로 코드를 작성합니다.
          </li>
          <li>퍼셉트론, 의사결정트리, 및 심층신경망 등의 인공지능 개념을 이해하고 있습니다.</li>
          <li>큰 문제를 작은 문제로 나누어 해결하는 분할정복 방식에 익숙합니다.</li>
          <li>문제의 엣지 케이스를 파악하거나 상황에 맞는 알고리즘을 선택할 수 있습니다.</li>
        </ul>
        <h3>기타</h3>
        <ul>
          <li>공식 문서, ChatGPT, 그리고 GitHub Copilot 등을 활용해 새로운 기술을 익히는 데 능숙합니다.</li>
          <li>전체적인 기술의 특징을 파악하고 하나씩 파고드는 탑 다운 방식으로 새로운 기술을 학습합니다.</li>
          <li>
            Notion, Teams, Figma, 그리고 Bruno 등의 협업 도구를 사용하는 데 익숙하며, Arc browser와 같은 새로운 도구들을
            사용해보는 것을 좋아합니다.
          </li>
          <li>문제 해결이 필요하거나 조직의 성장을 위한 일이라면 분야 상관없이 좋아하고 적극적으로 참여합니다.</li>
          <li>다른 분야의 팀원과 소통할 때 전문 용어는 가급적 피하며 상대방이 부담을 느끼지 않도록 소통합니다.</li>
          <li>GitHub Flow로 브랜치를 관리하고, 커밋 컨벤션을 지키며 협업합니다.</li>
          <li>협업을 위해서는 문서화가 필수라고 생각하며, ChatGPT 등을 활용하여 읽기 쉽게 작성하려 노력합니다.</li>
        </ul>
      </section>
      <section className="border-b">
        <h2>자격증</h2>
        <h3>어학</h3>
        <ul>
          <li>OPIc(English) IH - 2024.03</li>
        </ul>
        <h3>컴퓨터</h3>
        <ul>
          <li>삼성전자 DX S/W 역량테스트 B형(C++) - 2024.02</li>
          <li>정보처리산업기사 - 2022.09</li>
          <li>네트워크관리사 2급 - 2022.07</li>
        </ul>
      </section>
      <section className="border-b">
        <h2>연락처</h2>
        <ul>
          <li>이메일: dayongkr@gmail.com</li>
          <li>깃허브: https://github.com/dayongkr</li>
          <li>링크드인: https://www.linkedin.com/in/dayong-lee-240b53266</li>
        </ul>
      </section>
      <blockquote>끝까지 읽어주셔서 감사합니다, 오늘도 좋은 하루 보내세요.</blockquote>
    </main>
  );
}
