import { Section } from '@/components/Section';
import Link from 'next/link';

export function ProjectSection() {
  return (
    <Section>
      <h2>프로젝트</h2>
      <h3>
        성균관대학교 코딩플랫폼 (<Link href="https://codedang.com">코드당</Link>)
      </h3>
      <p>
        성균관대학교 재학생들이 별도의 개발 환경 설치 없이 수업 시간에 프로그래밍 문제를 풀고, 알고리즘 경진 대회를
        개최할 수 있는 등 학우들의 프로그래밍 역량을 향상하기 위한 교내 코딩 플랫폼 서비스를 개발했습니다.
      </p>
      <p>
        2024년 1학기에 주요 기능 개발을 완료하여 강의 시간에 약 70명의 재학생을 대상으로 회원가입과 문제 풀이 등 베타
        테스트를 성공적으로 완료했습니다. 이처럼 사용자가 있는 프로젝트이며, 약 4명씩 팀원이 있는 프론트엔드, 백엔드,
        인프라, 기획 및 디자인팀이 협업하여 운영 및 개발하고 있습니다.
      </p>
      <h3>기술 선택 기준 명료화 및 문서화</h3>
      <p>
        해당 프로젝트 참여 당시, 프론트엔드 팀에는 명확한 기술 선택 기준이 없었습니다. 주기적으로 개발자가 변경되는
        상황에서 별다른 이유 없이 배우고자 하는 사람이 적은 Vue로 개발하는 것은 문제가 있다고 생각했습니다. 실제로 신입
        부원을 모집하는 데 어려움을 겪고 있었습니다. 이에 학습이 쉽고 시장 점유율이 높은 기술을 선택하는 것이 동아리
        상황에 맞다고 생각했고, 상황에 맞는 기술을 사용하도록 추진했습니다. 이를 위해 기술 선택 기준 그리고 변경할
        기술의 특징과 선택 이유를 문서화하여 공유함으로써 충분한 공감대를 형성하였습니다. 이러한 과정을 통해 팀의
        일관성과 효율성을 높일 수 있었습니다.
      </p>
      <h3>Vue에서 Next.js로 전환</h3>
      <p>
        기존 부원의 이탈로 인해 신입 부원을 적극적으로 모집해야 했고, 위 선택 기준에 따라 React 기반의 Next.js로
        전환하기로 했습니다. 전환 당시 프론트엔드 팀장 역할을 맡고 있었으며, 프로젝트 초기 설정부터 전반적으로
        관여했습니다. 프로젝트 초기 설정 시, Lefthook, Prettier, Eslint와 같은 자동화 도구의 환경설정을 일부
        수정했습니다. 또한, 필요한 컴포넌트만 다운로드하여 Tailwind CSS로 수정할 수 있는 Shadcn UI 그리고 간단한 구조를
        가져 학습하기 쉬운 Zustand를 선택하는 등 상황에 맞게 기술을 선택했습니다.
      </p>
      <h3>분할정복 방식으로 문제 해결 그리고 적극적인 협업</h3>
      <p>
        Next.js 초기 설정을 완료한 이후, 사용자 인증과 같이 팀원들이 부담스러워하는 기능을 도맡아 구현했습니다. 사용자
        인증은 백엔드 서버에서 발급된 JWT 인증 토큰을 사용자와 SSR 서버 간에 주고받으며 관리하는 것으로, 프로젝트에서
        중요한 역할을 했습니다.
      </p>
      <p>
        먼저, 사용자 인증 흐름을 이해하기 위해 공식 문서를 참고하여 SSR 서버의 요청, 응답, 렌더링 흐름을 파악했습니다.
        그런 다음, 백엔드 코드를 통해 JWT 발급 및 인증 처리에 대한 자체적인 로직을 파악했습니다.
      </p>
      <p>
        구현 과정에서 사용자 인증이라는 큰 기능을 작은 기능으로 나누어 단계별로 작업을 진행했습니다. 예를 들어, 페이지
        요청 시 쿠키에서 인증 토큰을 확인하고, 토큰의 유효성을 검사하며, 필요한 경우 새 토큰을 발급받는 과정 등으로
        나누었습니다. 이에 따라 개발 과정이 체계적이고 효율적으로 이루어졌으며, 문제 발생 시 빠르게 대응할 수
        있었습니다. 이를 통해 공식 문서를 꼼꼼히 읽는 습관과 분할정복 방식으로 문제를 해결하는 역량을 키웠습니다.
      </p>
      <p>
        또한, 한 아이디로 여러 기기에서 동시에 로그인하면 인증 토큰 재발급이 불안정한 문제를 발견했습니다. 이를 해결하기
        위해 백엔드 서버 로그를 문제의 원인을 파악하고, 리프레시 토큰 관리 방식을 개선하는 해결책을 제안했습니다. 이처럼
        다른 팀의 일이라도 문제를 먼저 분석하고 가능하다면 개선점까지 전달하며 협업하려고 노력했습니다.
      </p>
      <h3>성능 및 생산성 개선 경험</h3>
      <p>
        먼저, Code Editor 페이지에서 First Load JS 파일 용량이 1.1MB를 초과하는 것을 발견했습니다. 이에 Webpack
        Analyzer를 사용하여 빌드된 청크를 분석한 결과, 불필요한 프로그래밍 언어 패키지들이 모두 불러와지고 있음을
        확인했습니다. 이를 해결하여 First Load JS 파일 용량을 0.67MB로 줄였습니다. 이로써 사용자 경험을 개선하였습니다.
      </p>
      <p>
        또한, 사용자 입력 등으로 자주 상태가 변경되는 컴포넌트를 중심으로 React Developer Tools를 사용하여 불필요한 리
        렌더링이 발생하는지 확인했습니다. 불필요한 리 렌더링이 발생하는 컴포넌트를 분리하여 불필요한 리 렌더링을
        방지했습니다.
      </p>
      <p>
        자주 사용되는 상수는 한 파일에 모으고, Omit과 같은 유틸리티 타입을 사용해 타입 중복 선언을 방지함으로써 코드의
        중복을 최소화했습니다. 이를 통해 코드 유지보수를 용이하게 하고, 협업 시 코드의 가독성을 높이는 데 기여했습니다.
      </p>
      <p>
        Next.js, Zustand, Shadcn UI 등의 소셜 채널을 팔로우하고, 주기적으로 공식 문서를 읽으며 더 나은 구현 방법을
        고민하고 공유했습니다. 예를 들어, 최근에는 Zustand의 Persist 기능을 알게 되어 해당 기능을 사용하는 방식으로
        코드를 간소화하고, 관련 내용을 팀원들과 공유했습니다.
      </p>
      <p>이러한 경험을 통해 소프트웨어 품질 및 성능을 향상하고, 생산성을 개선하는 데 많은 재미와 보람을 느꼈습니다.</p>
    </Section>
  );
}
